<?php
function get_missing_tabset( $module )
{
    $tabset = NULL;
    $extras = "dog";
    $i = 1;
    while ( $extras != NULL )
    {
       $extras = variable_get("tabs_params_".ordinal($i),NULL);
       if ( $extras != NULL )
       {
           $params = explode("&",$extras);
           for ( $j=0;$j<count($params);$j++ )
           {
               $parts = explode("=",$params[$j]);
               if ( count($parts)==2 )
               {
                   if ( $parts[0]=='modules' )
                   {
                       if ( strpos($parts[1],$module)!= -1 )
                       {
                           $tabset = variable_get("tabs_key_".ordinal($i),NULL);
                           $extras = NULL;
                           break;
                       }
                   }
               }
           }
       }
       $i++;
    }
    return $tabset;
}
function compose_tabs_params( $args )
{
    $mod_path = drupal_get_path('module', 'tabs');
    $tabset = NULL;
    $module = NULL;
    $str = "target=content&modpath=".$mod_path;
    for ( $i=0;$i<count($args);$i++ )
    {
        $parts = explode("=",$args[$i]);
        if ( count($parts)==2 )
        {
            $key = $parts[0];
            if ( strcmp($key,"module")==0
                || strcmp($key,"modpath")==0
                || strcmp($key,"tabs")==0
                || strcmp($key,"tabset")==0
                || strcmp($key,"docid")==0 )
            {
                if ( $key=="tabset" )
                   $tabset = $parts[1];
                if ( $key == "module" )
                   $module = $parts[1];
                if ( strlen($str)>0 )
                    $str .= '&';
                $str .= urldecode($args[$i]);
            }
        }
    }
    // supply the tabset if it is missing
    if ( ($tabset == NULL||$tabset==undefined) && $module != NULL )
    {
        $tabset = get_missing_tabset( $module );
    }
    // get the extra params for this tabset
    if ( $tabset != NULL )
    {
        $i=1;
        $myparams="";
        $mykey = "dog";
        while ( $mykey != NULL )
        {
            $mykey = variable_get("tabs_key_".ordinal($i),NULL);
            if ( $mykey != NULL && $mykey == $tabset )
            {
                $extras = variable_get("tabs_params_".ordinal($i),NULL);
                if ( $extras != NULL )
                    $str .= '&'.$extras;
                break;
            }
            $i++;
        }
    }
    return $str;
}
function compose_mod_params( $args )
{
    $str = "target=tabs-content";
    for ( $i=0;$i<count($args);$i++ )
    {
        $parts = explode("=",$args[$i]);
        if ( count($parts)==2 )
        {
            $key = $parts[0];
            if ( strcmp($key,"module")!=0 
                && strcmp($key,"modpath")!=0
                && strcmp($key,"modules")!=0
                && strcmp($key,"tabs")!=0
                && strcmp($key,"target")!=0
                && strcmp($key,"docid")!=0 
                && strcmp($key,"tabset")!=0 )
            {
                if ( strlen($str)>0 )
                    $str .= '&';
                $str .= $args[$i];
            }
        }
    }
    return $str;
}
function tabs_preprocess_page(&$vars)
{
    if (user_access('administer modules') && path_is_admin(current_path())) {
        drupal_add_css(drupal_get_path('module','tabs').'/tabs.css','file');
    }
    else if ( strpos(request_uri(),"tabs") )
    {
        drupal_add_css(drupal_get_path('module','tabs').'/tabs.css','file');
        $uri = request_uri();
        $pos = strpos($uri,"?");
        if ( $pos != -1 )
        {
            $rest = substr($uri,$pos+1);
            $args = explode("&",$rest);
            // pass js params via local storage
            // first the tabs module itself
            // these scripts will be executed in order
            $tabs_path = drupal_get_path('module','tabs');
            $tabs_script = $tabs_path.'/tabs.js';
            $tabs_params = compose_tabs_params($args);
            drupal_add_js(
                "jQuery(document).ready(function (){localStorage.setItem('tabs_params','"
                .$tabs_params."')})",'inline');
            drupal_add_js($tabs_script,'file');
            for ( $i=0;$i<count($args);$i++ )
            {
                $parts = explode("=",$args[$i]);
                if ( count($parts)==2 )
                {
                    if ( $parts[0] == "module" )
                    {
                        // now include script for the current module within tabs
                        $mod_path = drupal_get_path('module',$parts[1]);
                        $mod_script = $mod_path.'/js/'.$parts[1].'.js';
                        $mod_params = compose_mod_params($args);
                        drupal_add_js(
                            "jQuery(document).ready(function (){localStorage.setItem('"
                            .$parts[1]."_params','"
                            .$mod_params."')})",'inline');
                        drupal_add_js($mod_script,'file');
                        drupal_add_css($mod_path.'/css/'.$parts[1].'.css','file');
                    }
                }
            }
        }
    }
}
function tabs_block_info() {
  $blocks['tabs'] = array(
    'info' => t('Provide a tabbed container for other modules'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
function tabs_help($path, $arg) {
    switch ($path)
    {
        case "admin/help#tabs":
            return '<p>' .
                t("Tabbed container for other modules")
                . '</p>';
            break;
    }
}
function tabs_block_view($delta = '') {
  switch ($delta) {
    case 'tabs':
      $block['subject'] = t('Provide tabbed container');
      $uri = request_uri();
      $pos = strpos($uri,"?");
      $tabs_params = "";
      if ( $pos != -1 )
      {
          $rest = substr($uri,$pos+1);
          $args = explode("&",$rest);
          $tabs_params = "?"+compose_tabs_params($args);
      }
      $mod_path = drupal_get_path('module', 'compare');
      $block['content'] = '<script type="text/javascript" src="'.$mod_path
          .'/tabs.js'.$tabs_params.'"></script>';
      return $block;
  }
}
/**
 * Implements hook_menu(). Needed for config screen.
 */
function tabs_menu() {
  $items = array();

  $items['admin/config/content/tabs'] = array(
    'title' => 'Tabs',
    'description' => 'Configuration for tabs module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabs_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}
function tabs_form($form, &$form_state)
{
    $n = variable_get('tabs_numpages',3);
    if ( $n > 6 )
        $n = 6;
    elseif ( $n < 1 )
        $n = 1;
    $form['tabs_numpages'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of tab-arrays (1-6)'),
        '#default_value' => $n,
        '#size' => 2,
        '#maxlength' => 2,
        '#required' => TRUE
    );
    for ( $i=1;$i<=$n;$i++ )
    {
        $form['tabs_key_'.ordinal($i)] = array(
        '#type' => 'textfield',
        '#title' => t('Key'),
        '#default_value' => variable_get('tabs_key_'.ordinal($i),'Index '.$i),
        '#size' => 16,
        '#maxlength' => 16,
        '#required' => TRUE
        );
        $form['tabs_params_'.ordinal($i)] = array(
        '#type' => 'textfield',
        '#title' => t('Params'),
        '#default_value' => variable_get('tabs_params_'.ordinal($i),'Url '.$i),
        '#size' => 76,
        '#maxlength' => 256,
        '#required' =>TRUE
        );
    }
    return system_settings_form($form);
}
