<?php
/**
 * Convert a string of uri parameters separated by "&" to a key value array
 * @param $params the paramters as a uri string
 * @param &$args a reference to the key-value array being built
 */
function params_to_array( $params, &$args )
{
    $parts = explode("&",$params);
    for ( $i=0;$i<count($parts);$i++ )
    {
        $halves = explode("=",$parts[$i]);
        if ( count($halves)==2 )
        {
            if ( !is_null($halves[1])&& !is_null($halves[0]) )
                $args[$halves[0]] = urldecode($halves[1]);
        }
    }
}
/**
 * Turn a key-value array of parameters into a parameter string
 * @param &$args the key-value array of parameters
 * @return the paremtetrs as a string not preceded by "?"
 */
function array_to_params( &$args )
{
    $params = "";
    foreach ( $args as $key => $value )
    {
        if ( strlen($params)>0 )
            $params .= "&";
        $params .= $key . '=' . urlencode($value);
    }
    return $params;
}
/**
 * Get the extra parameters from the Drupal settings for this tabset
 * @param $tabset the key for the desired tabset
 * @param &$args reference to the parameters being built
 */
function get_tabset_params( $tabset, &$args )
{
    $i=1;
    $key;
    do
    {
        $key = variable_get("tabs_key_".ordinal($i),NULL);
        if ( $key != NULL && $key == $tabset )
        {
            $extras = variable_get("tabs_params_".ordinal($i),NULL);
            if ( $extras != NULL )
                params_to_array( $extras, $args );
            break;
        }
        $i++;
    } while ( $key != NULL );
}
/**
 * Get the correct tabset name for a particular module
 * @param $module the module to search for
 * @return the name of the first tabset it occurs in OR null
 */
function get_missing_tabset( $module )
{
    $tabset = NULL;
    $extras;
    $i = 1;
    do
    {
       $extras = variable_get("tabs_params_".ordinal($i),NULL);
       if ( $extras != NULL )
       {
           $args = array();
           params_to_array($extras,$args);
           $modules = $args['modules'];
           if ( !is_null($modules) )
           {
               $parts = explode(",",$modules);
               for ( $j=0;$j<count($parts);$j++ )
               {
                   if ( strpos($parts[$j],$module)==0 )
                   {
                        $tabset = variable_get("tabs_key_".ordinal($i),NULL);
                        $extras = NULL;
                        break;
                   }
               }
           }
       }
       $i++;
    }
    while ( $extras != NULL );
    return $tabset;
}
/**
 * Compose a JSON string describing the current user for later encryption
 * @return a JSON string contain roles and user name
 */
function get_userdata()
{
    global $user;
    if ( $user )
    {
        $udata = "{\"name\":";
        $udata .= "\"".$user->name."\",\"roles\": [";
        foreach ( $user->roles as $role )
        {
            if ( $udata[strlen($udata)-1]!='[' )
                $udata .= ",";
            $udata .= "\"".$role."\"";
        }
        $udata .= "]}";
        return $udata;
    }
    else
        return "{\"name\":\"guest\",\"roles\":[]}";
}
/**
 * A simple and custom scrambling function for user data
 * @paramt $text the text to scramble
 * @return a scrmabled version thereof
 */
function scramble( $text )
{
    $key = "I tell a settlers tale of the old times";
    $enciphered = "";
    $klen = strlen($key);
    $tlen = strlen($text);
    for ( $i=0;$i<$tlen;$i++ )
        $enciphered .= $text[$i] ^ $key[$i%$klen];
    $b64 = base64_encode($enciphered);
/*  $orig = base64_decode($b64);
    $deciphered = "";
    $olen = strlen($enciphered);
    for ( $i=0;$i<$olen;$i++ )
        $deciphered .= $enciphered[$i] ^ $key[$i%$klen];*/
    return $b64;
}
/**
 * Build the tabs specific parameters from various sources
 * @param &$args reference to the parameters array beuing built
 * @return the paremeters as a string, separated by "&" (no leading ?)
 */
function compose_tabs_params( &$args )
{
    $mod_path = drupal_get_path('module', 'tabs');
    $args['target'] = 'content';
    $args['modpath'] = $mod_path;
    if ( array_key_exists('tabset',$args) )
    {
        get_tabset_params($args['tabset'],$args);
        if ( !array_key_exists('module',$args) && array_key_exists('modules',$args) )
        {
            $args['module'] = get_one_module($args['modules'],0);
        }
    }
    else if ( array_key_exists('module',$args) )
    {
        $args['tabset'] = get_missing_tabset( $args['module'] );
        get_tabset_params($args['tabset'],$args);
    }
    $args['udata'] = scramble(get_userdata());
    return array_to_params($args);
}
/**
 * Build the module-specific parameters from various sources
 * @param &$args reference to the parameters being built
 * @param $mod_spec name of module (possibly with params)
 * @return the parameters as a string, separated by "&" (no leading ?)
 */
function compose_mod_params( &$args, $mod_spec )
{
    $args['mod-target'] = 'tabs-content';
    $local_params = get_mod_params($mod_spec);   
    if ( $local_params != NULL )
    {
        params_to_array($local_params,$args);
    }
    return array_to_params($args);
}
/**
 * Get one module from a comma-separated list of modules
 * @param $modules the list of modules
 * @param $index the index in the list
 * @return the module spec at $index
 */
function get_one_module($modules,$index)
{
    $parts = explode(",",$modules);
    if ( count($parts)>$index )
    {
        return $parts[$index];
    }
    return "";
}
/**
 * Add parameters stripped from a raw uri
 * @param &$params reference to an array to be built
 * @param $uri the uri to be stripped
 * @param $inclusions array of parameter keys that must be included
 * @param $exclusions array of parameter names that must be excluded
 */
function add_uri_params( &$params, $uri, $inclusions, $exclusions )
{
    $pos = strpos($uri,"?");
    if ( $pos !== FALSE )
    {
        $rest = substr($uri,$pos+1);
        $args = explode("&",$rest);
        for ( $i=0;$i<count($args);$i++ )
        {
            $halves = explode("=",$args[$i]);
            if ( count($halves)==2 )
            {
                if ( (empty($exclusions) && in_array($halves[0],$inclusions)) 
                   || (empty($inclusions)&&!in_array($halves[0],$exclusions)) )
                {
                    if ( $halves[1] != "undefined" && strlen($halves[1])>0 )
                        $params[$halves[0]] = urldecode($halves[1]);
                }
            }
        }
    }
}
/**
 * Get the raw module name sans arguments
 * @param $mdoule the full module spec
 * @return the name of the module without arguments
 */
function get_mod_name( $module )
{
    if ( strpos($module,"?") !== FALSE )
    {
        $parts = explode("?",$module);
        return $parts[0];
    }
    else
        return $module;
}
/**
 * Get the parameters of a module spec
 * @param $module the full module spec
 * @return the parameters of the module or NULL
 */
function get_mod_params( $module )
{
    if ( strpos($module,"?") !== FALSE )
    {
        $parts = explode("?",$module);
        if ( count($parts)==2 && !is_null($parts[1]) )
            return $parts[1];
    }
    else
        return NULL;
}
/**
 * Get the module name from the argument list or elsewhere
 * @param &$args reference to the tabs params array
 * @return the the module spec or NULL
 */
function get_module(&$args)
{
    if ( array_key_exists('module',$args) )
    {
        return $args['module'];
    }
    else if ( array_key_exists('modules',$args) )
    {
        $modules = $args['modules'];
        return get_one_module($modules,0);
    }
    else
        return NULL;
}
function tabs_preprocess_page(&$vars)
{
    if (user_access('administer modules') && path_is_admin(current_path())) {
        drupal_add_css(drupal_get_path('module','tabs').'/tabs.css','file');
    }
    else if ( strpos(request_uri(),"tabs") )
    {
        drupal_add_css(drupal_get_path('module','tabs').'/tabs.css','file');
        $tabs_params = array();
        $mod_params = array();
        $tab_includes = array("module","modpath","modules","tabs","target","docid","tabset","menuopt","event_type");
        $empty = array();
        add_uri_params($tabs_params,request_uri(),$tab_includes,$empty);
        add_uri_params($mod_params,request_uri(),$empty,$tab_includes);
        // prepare tabs
        $tabs_path = drupal_get_path('module','tabs');
        $tabs_script = $tabs_path.'/tabs.js';
        $tabs_uri_params = compose_tabs_params($tabs_params);
        // prepare module
        $mod_spec = get_module($tabs_params);
        $mod_name = get_mod_name($mod_spec);
        $mod_path = drupal_get_path('module',$mod_name);
        $mod_script = $mod_path.'/js/'.$mod_name.'.js';
        $mod_uri_params = compose_mod_params($mod_params,$mod_spec);
        drupal_add_js(
            'jQuery(document).ready(function (){'
            .'if (jQuery("#tabs_params").length==0){jQuery(document.body).append(\''
            .'<input type="hidden" id="tabs_params"></input>\');}if (jQuery("#'
            .$mod_name.'_params").length==0)jQuery(document.body).append(\''
            .'<input type="hidden" id="'.$mod_name.'_params"></input>\');'
            .'jQuery("#tabs_params").val("'.$tabs_uri_params.'");jQuery("#'.$mod_name
            .'_params").val("'.$mod_uri_params.'");});','inline');
        drupal_add_js($tabs_script,'file');
        drupal_add_js($mod_script,'file');
        drupal_add_css($mod_path.'/css/'.$mod_name.'.css','file');
    }
}
function tabs_block_info() {
  $blocks['tabs'] = array(
    'info' => t('Provide a tabbed container for other modules'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
function tabs_help($path, $arg) {
    switch ($path)
    {
        case "admin/help#tabs":
            return '<p>' .
                t("Tabbed container for other modules")
                . '</p>';
            break;
    }
}
function tabs_block_view($delta = '') {
  switch ($delta) {
    case 'tabs':
      $uri = request_uri();
      $pos = strpos($uri,"?");
      $tabs_params = "";
      if ( $pos != -1 )
      {
          $rest = substr($uri,$pos+1);
          $args = explode("&",$rest);
          $pargs = urldecode(compose_tabs_params($args));
          $tabs_params = "?".$pargs;
      }
      $mod_path = drupal_get_path('module', 'tabs');
      $block['content'] ="";/* '<script type="text/javascript" src="'.$mod_path
          .'/tabs.js'.$tabs_params.'"></script>';*/
      return $block;
  }
}
/**
 * Implements hook_menu(). Needed for config screen.
 */
function tabs_menu() {
  $items = array();

  $items['admin/config/content/tabs'] = array(
    'title' => 'Tabs',
    'description' => 'Configuration for tabs module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabs_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}
function tabs_form($form, &$form_state)
{
    $n = variable_get('tabs_numpages',3);
    if ( $n > 6 )
        $n = 6;
    elseif ( $n < 1 )
        $n = 1;
    $form['tabs_numpages'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of tab-arrays (1-6)'),
        '#default_value' => $n,
        '#size' => 2,
        '#maxlength' => 2,
        '#required' => TRUE
    );
    for ( $i=1;$i<=$n;$i++ )
    {
        $form['tabs_key_'.ordinal($i)] = array(
        '#type' => 'textfield',
        '#title' => t('Key'),
        '#default_value' => variable_get('tabs_key_'.ordinal($i),'Index '.$i),
        '#size' => 16,
        '#maxlength' => 16,
        '#required' => TRUE
        );
        $form['tabs_params_'.ordinal($i)] = array(
        '#type' => 'textfield',
        '#title' => t('Params'),
        '#default_value' => variable_get('tabs_params_'.ordinal($i),'Url '.$i),
        '#size' => 76,
        '#maxlength' => 512,
        '#required' =>TRUE
        );
    }
    return system_settings_form($form);
}
