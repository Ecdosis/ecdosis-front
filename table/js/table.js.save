/**
 * Create a table view
 * @param target the id of the element we are to replace
 * @param docid the docid of the work to fetch and view
 * @param selected a comma-separate list of full version paths
 * @param version1 the full version path of the base version
 * @param pos the index of the leftmost segment in the display
 */ 
function table(target,docid,selected,version1,pos)
{
    this.docid = unescape(docid);
    this.target = target;
    this.pos = parseInt((pos==undefined)?0:pos);
    this.version1 = version1;
    var self = this;
    this.min = function(a,b) {
        return (a<b)?a:b;
    };
    this.max = function(a,b) {
        return (a>b)?a:b;
    };
    this.isEmpty = function(item) {
        return item==undefined||item==null||item.length==0;
    };
    this.addCell = function(cell) {
        var html = '<td';
        if ( 'class' in cell )
            html += ' class="'+cell.class+'"';
        html += '>';
        for ( var k=0;k<cell.segments.length;k++ )
        {
            var seg = cell.segments[k];
            if ( 'class' in seg )
                html += '<span class="'+seg.class+'">';
            html += seg.text;
            if ( 'class' in seg )
                html += '</span>';
        }
        return html;
    };
    this.averageSegmentLength = function() {
        return 10;
    };
    /**
     * Fetch a section of the table and install it
     * @param left the left offset in base version
     * @param right the rightmost offset in base or Java Integer.MAX_VALUE
     */
    this.fetchTable = function(left,right) {
        var url = "http://"+window.location.hostname+"/compare/table/json"
        var length = right-left;
        url += "?docid="+self.docid+"&offset="+left+"&length="+length;
        if ( self.version1 != undefined )
            url += "&version1="+self.version1;
        jQuery.get(url,function(data) {
            jQuery("#"+self.target).append(self.tableToHtml(data.rows));
            var maxLength = offsets.length*sel.averageSegmentLength();
            jQuery("#slider").slider({min:0,max:maxLength});
        }).fail(function(jqXHR, textStatus, err){alert(err)});
    };
    /**
     * Convert a table-section from json to HTML
     * @param jArray an array of segments
     * @return a html representation of the table
     */
    this.tableToHtml = function(jArray) {
        var t = jQuery("#"+self.target);
        t.contents().remove();
        // left fixed column first
        var html = '<div id="sigla"><table>';
        for ( var i=0;i<jArray.length;i++ )
        {
            var cell = jArray[i].cells[0];
            html += '<tr>';
            html += self.addCell(cell);
            html += '</tr>';
        }
        html += '</table></div>';
        // scrolling table
        html += '<div id="table-wrapper"><table>';
        for ( var i=0;i<jArray.length;i++ )
        {
            html += '<tr>';
            var row = jArray[i];
            for ( var j=1;j<row.cells.length;j++ )
                html += self.addCell(row.cells[j]);
            html += '</tr>';
        } 
        html += '</table></div>';
        html += '<div id="slider"></div>';
        return html;
    };
    var pe = jQuery("#positions");
    var de = jQuery("#docid");
    var positions;
    var local_docid;
    if ( de.length == 0 )
    {
        jQuery(document.body).append('<input type="hidden" id="docid"></input>');
        de = jQuery("#docid");
    }
    else
        local_docid = de.val();
    if ( pe.length == 0 )
    {
        jQuery(document.body).append('<input type="hidden" id="positions"></input>');
        pe = jQuery("#positions");
    }
    else
        positions = pe.val();
    if ( positions != undefined )
    {
        var jObj = JSON.parse(positions);
        self.offsets = jObj.ranges;
    }
    if ( !this.isEmpty(local_docid) && this.isEmpty(docid) )
        this.docid = local_docid;
    else
        de.val(this.docid);
    if ( this.isEmpty(this.offsets) )
    {
        var url = "http://"+window.location.hostname+"/compare/table/info";
        url += "?docid="+this.docid;
        if ( selected != undefined )
            url += "&selected="+selected;
        if ( version1 != undefined )
            url += "&version1="+version1;
        jQuery.get( url, function(data) {
            if ( self.pos == 0 )
            {
                self.left = 0;
                self.right = self.min(self.pos+150,data.ranges.length-1);
            }
            else
            {
                self.left = self.max(self.pos-50,0);
                self.right = self.min(self.pos+150,data.ranges.length-1);
            }
            self.offsets = data.ranges;
            pe.val(JSON.stringify(data));
            var end = (self.right < data.rangeslength-1)?data.ranges[self.right+1]:data.len;
            self.fetchTable(data.ranges[self.left],end);
        });
    }
    else
    {
        var end = (self.right<data.length)?data[self.right+1]:2147483647;
        self.fetchTable(data[self.left],end);
    }
}
function get_one_param( params, name )
{
    var parts = params.split("&");
    for ( var i=0;i<parts.length;i++ )
    {
        var halves = parts[i].split("=");
        if ( halves.length==2 && halves[0]==name )
            return halves[1];
    }
    return "";
}
/**
 * This reads the "arguments" to the javascript file
 * @param scrName the name of the script file minus ".js"
 */
function getTableArgs( scrName )
{
    var params = new Object ();
    var module_params = jQuery("#table_params").val();
    if ( module_params != undefined && module_params.length>0 )
    {
        var parts = module_params.split("&");
        for ( var i=0;i<parts.length;i++ )
        {
            var halves = parts[i].split("=");
            if ( halves.length==2 )
                params[halves[0]] = halves[1];
        }
    }
    else
    {
        var scripts = jQuery("script");
        scripts.each( function(i) {
            var src = jQuery(this).attr("src");
            if ( src != undefined && src.indexOf(scrName) != -1 )
            {
                var qStr = src.replace(/^[^\?]+\??/,'');
                if ( qStr )
                {
                    var pairs = qStr.split(/[;&]/);
                    for ( var i = 0; i < pairs.length; i++ )
                    {
                        var keyVal = pairs[i].split('=');
                        if ( ! keyVal || keyVal.length != 2 )
                            continue;
                        var key = unescape( keyVal[0] );
                        var val = unescape( keyVal[1] );
                        val = val.replace(/\+/g, ' ');
                        params[key] = val;
                    }
                }
                return params;
            }
        });
    }
    if ( !('docid' in params) )
    {
        var tabs_params = jQuery("#tabs_params").val();
        if ( tabs_params != null && tabs_params.length>0 )
            params['docid'] = get_one_param(tabs_params,'docid');
    }
    if ( !('target' in params) && 'mod-target' in params )
        params['target'] = params['mod-target'];
    return params;
}
/**
 * Load the compare tool with three arguments
 */
jQuery(document).ready(
    function(){
        var params = getTableArgs('table');
        new table(params['target'],params['docid'],params['selected'],
            params['version1'],params['pos']);
    }
);


